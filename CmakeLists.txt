cmake_minimum_required(VERSION 3.10)
project(CmakeCpp)
include_directories(include)

# Function to create and link a library
function(create_library_and_link exec_name lib_name source_file)
    add_library(${lib_name} STATIC ${source_file})  # Create a static library
    target_link_libraries(${exec_name} PRIVATE ${lib_name})  # Link it privately
endfunction()

# Macro (less flexible, but useful)
macro(create_library_and_link_macro exec_name lib_name)
    add_library(${lib_name} STATIC src/${lib_name}.cpp)  # Assumes file = lib_name.cpp
    target_link_libraries(${exec_name} PRIVATE ${lib_name})
endmacro()

# Define source files for the executable
set(SOURCE_FILES src/main.cpp src/ThirdAction.cpp)
add_executable(hello ${SOURCE_FILES})

# Use function to create and link the 'utils' library
create_library_and_link(hello utils src/utils.cpp)

# Use macro (alternative way)
#create_library_and_link_macro(hello another_lib)  # Must have src/another_lib.cpp in this case i dont have another library
#CMake Presets & Build Types
#When building a project, you usually have different modes:

#🛠 Debug → Includes debugging symbols and no optimizations (useful during development).
#
#🚀 Release → Optimized for performance, removes debugging symbols.
#
#⚙️ RelWithDebInfo → Optimized but still includes debug symbols.
#
#🛡 MinSizeRel → Optimized for the smallest binary size.
#When you run CMake in the terminal, you can specify the build type:

#cmake -DCMAKE_BUILD_TYPE=Debug -S . -B build
#cmake --build build
set(CMAKE_BUILD_TYPE  Debug) # Change to Release for optimization

